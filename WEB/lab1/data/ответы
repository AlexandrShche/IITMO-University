1) js однопоточный, многопоточность эмулируется 
Для эмулирования многопоточности используется events - планирование исполнения разных участков кода на определённое время
такой метод называется "цикл событий" или "events-loop"

движок js состоит из стека, кучи и очереди задач

со СТЕКОМ всё более-менее яснопонятно
КУЧА используется для хранения объектов, объекты в куче не упорядочены.
ОЧЕРЕДЬ ЗАДАЧ хранит в себе задачи, которые движок должен обработать.

ЦИКЛ СОБЫТИЙ - это постоянный процесс, который проверяет стек выхова, и если стек пуст, переходит к исполнению инструкций из очреди задач.

 в очереди задач хранятся запланированные обратные вызовы, которые выполняются, когда закончена обработка главного потока.
 Запланированные действия разбиты на микрозадачи и макрозадачи.

 
 В одной итерации цикла событий ровно одна макрозадача обрабатывается из очереди (очередь задач предназначена для макрозадач) 
 После этого в том же цикле обрабатываются все микрозадачи, запланированные в соответствующую очередь. Эти микрозадачи могут добавлять в очередь другие микрозадачи, и процесс будет продолжаться, пока очередь не опустеет.
 
 
 Ключевые моменты

    Задачи берутся из очереди задач.
    Задача из очереди задач — макрозадача != микрозадача.
    Все микрозадачи обрабатываются, пока не очистится очередь, и только после этого начинается следующий цикл макрозадачи.
    Микрозадачи могут ставить в очередь другие микрозадачи, и все они должны быть исполнены в пределах одного цикла.
    Рендеринг UI происходит после исполнения микрозадач.

 
 
 
 
 
 2) ООП в js
 Объект - ссылочный тип
 
 
 
 
 
 
 
 
 
 СЕССИИ PHP
 
 PHP поддерживает механизм сессий
 session id хранится либо в печеньках, либо передаётся через URL(чё?)
 $_SESSION - суперглобальный массив 
 
 
 
 
 CGI отличается от fast-CGI
 В отличие от программы CGI, которая создает новый процесс для каждого запроса, FastCGI использует непрерывный процесс (главный) для обработки серии запросов. Эти процессы управляются сервером FastCGI, а не Интернетом. Когда поступает запрос, веб-сервер передает переменные среды и запрос страницы в процесс FastCGI через сокет или TCP-соединение.

 В то время как CGI-программы взаимодействуют с сервером через STDIN и STDOUT запущенного CGI-процесса, FastCGI-процессы используют Unix Domain Sockets или TCP/IP для связи с сервером. Это даёт следующее преимущество над обычными CGI-программами: FastCGI-программы могут быть запущены не только на этом же сервере, но и где угодно в сети. Также возможна обработка запросов несколькими FastCGI-процессами, работающими параллельно.
 
